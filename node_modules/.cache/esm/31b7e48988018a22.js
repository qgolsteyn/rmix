let createNode;_880‍.x([["default",()=>_880‍.o]]);_880‍.w("../core/createNode",[["createNode",["createNode"],function(v){createNode=v}]]);

_880‍.d({
  T: (scope) => createNode(undefined, [true], scope),
  F: (scope) => createNode(undefined, [false], scope),
  "?": (scope) => {
    if (scope.children[0] === true && scope.children[1]) {
      return createNode(undefined, scope.children.slice(1), scope);
    } else {
      return createNode();
    }
  },
  "==": (scope) =>
    scope.children[0] === scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  "!=": (scope) =>
    scope.children[0] !== scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  ">": (scope) =>
    scope.children[0] > scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  "<": (scope) =>
    scope.children[0] < scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  ">=": (scope) =>
    scope.children[0] >= scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  "<=": (scope) =>
    scope.children[0] <= scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  and: (scope) =>
    scope.children[0] && scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
  or: (scope) =>
    scope.children[0] || scope.children[1]
      ? createNode("process", ["T"], scope)
      : createNode("process", ["F"], scope),
});
