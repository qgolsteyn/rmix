let fs,path,createNode;_0fd‍.x([["parse",()=>parse],["load",()=>load]]);_0fd‍.w("fs",[["*",null,function(v){fs=v}]]);_0fd‍.w("path",[["*",null,function(v){path=v}]]);_0fd‍.w("./createNode",[["createNode",["createNode"],function(v){createNode=v}]]);




const parseRules = [
  { type: "space", regex: /^\s/ },
  { type: "lParen", regex: /^\(/ },
  { type: "rParen", regex: /^\)/ },
  { type: "number", regex: /^[0-9\.]+/ },
  { type: "string", regex: /^".*?"/ },
  { type: "variable", regex: /^[^\s\(\)]+/ },
];

const tokenizer = (rules) => (input) => {
  for (let i = 0; i < rules.length; i += 1) {
    let tokenized = rules[i].regex.exec(input);
    if (tokenized) {
      return {
        token: tokenized[0],
        type: rules[i].type,
        rest: input.slice(tokenized[0].length),
      };
    }
  }

  throw new Error(`no matching tokenize rule for ${JSON.stringify(input)}`);
};

const parser = (tokenize) =>
  function parse(input, ast, parents = []) {
    if (input === "") {
      return ast;
    }

    const { token, type, rest } = tokenize(input);

    if (type === "space") {
      // do nothing
      return parse(rest, ast, parents);
    } else if (type === "variable") {
      ast.push(token);
      return parse(rest, ast, parents);
    } else if (type === "number") {
      ast.push(Number(token));
      return parse(rest, ast, parents);
    } else if (type === "string") {
      ast.push(token.replace(/(^"|"$)/g, "").replace(/\\n/g, "\n"));
      return parse(rest, ast, parents);
    } else if (type === "lParen") {
      parents.push(ast);
      return parse(rest, [], parents);
    } else if (type === "rParen") {
      const parentAst = parents.pop();
      if (parentAst) {
        parentAst.push(ast);
        return parse(rest, parentAst, parents);
      }

      return parse(rest, ast, parents);
    }

    throw new Error(`Missing parse logic for rule ${JSON.stringify(type)}`);
  };

       const parse = (scope) =>
  createNode(
    undefined,
    parser(tokenizer(parseRules))(scope.children[0]),
    scope
  );

       const load = (scope, parent) => {
  const extension = path.extname(scope.children[0]);
  if (extension === ".rem") {
    return createNode(
      undefined,
      parser(tokenizer(parseRules))(
        "(_ " + fs.readFileSync(scope.children[0], "utf-8") + ")"
      ),
      scope
    );
  } else if (extension === ".js") {
    const lib = require("../" + scope.children[0]).default;
    for (const key of Object.keys(lib)) {
      parent[key] = lib[key];
    }
    return createNode(undefined, [], scope);
  } else {
    throw "Unknown extension";
  }
};
