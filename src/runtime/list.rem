(.defn .map
    (.def op (.head (#)))
    (.def data (.tail (#)))
    (? (> (.len (data)) 0)
        (_
            (.apply (op) (.head (data)))
            (.map (op) (.tail (data))))))

(.defn .filter
    (.def op (.head (#)))
    (.def data (.tail (#)))
    (? (> (.len (data)) 0)
        (_ 
            (? (.apply (op) (.head (data)))
                (.head (data)))
            (.filter (op) (.tail (data))))))

(.defn .range
    (.defn rangeInner
        (.def num (.get 0 (#)))
        (? (< (num) (end)) (_ (num) (rangeInner (+ (num) (step))))))
    (? (== (.len (#)) 1)
        (_
            (.def end (.get 0 (#)))
            (.def step 1)
            (rangeInner 0))
    (? (== (.len (#)) 2)
        (_
            (.def end (.get 1 (#)))
            (.def step 1)
            (rangeInner (.get 0 (#))))
        (_
            (.def end (.get 1 (#)))
            (.def step (.get 2 (#)))
            (rangeInner (.get 0 (#)))))))
